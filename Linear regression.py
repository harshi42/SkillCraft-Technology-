{"cells":[{"metadata":{},"cell_type":"markdown","source":"# Welcome to Jupyter!"},{"metadata":{"trusted":true},"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\n\nsquare_feet = np.random.randint(1000, 4000, 100)  \nbedrooms = np.random.randint(1, 6, 100)  \nbathrooms = np.random.randint(1, 4, 100)  \n\nprice = square_feet * 150 + bedrooms * 10000 + bathrooms * 20000 + np.random.randint(10000, 50000, 100)\n\ndf = pd.DataFrame({\n    'Square_Feet': square_feet,\n    'Bedrooms': bedrooms,\n    'Bathrooms': bathrooms,\n    'Price': price\n})\n\nprint(df.head())\nX = df[['Square_Feet', 'Bedrooms', 'Bathrooms']]\ny = df['Price']  \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"R-squared: {r2}\")\n\nplt.scatter(y_test, y_pred)\nplt.xlabel(\"True Prices\")\nplt.ylabel(\"Predicted Prices\")\nplt.title(\"True vs Predicted House Prices\")\nplt.show()\n","execution_count":1,"outputs":[{"output_type":"stream","text":"   Square_Feet  Bedrooms  Bathrooms   Price\n0         1860         4          1  352436\n1         2294         3          3  452854\n2         2130         3          2  410177\n3         2095         1          2  380145\n4         2638         3          1  475438\nMean Squared Error: 153880497.74201012\nR-squared: 0.9906619067811275\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{},"cell_type":"markdown","source":"This repo contains an introduction to [Jupyter](https://jupyter.org) and [IPython](https://ipython.org).\n\nOutline of some basics:\n\n* [Notebook Basics](../examples/Notebook/Notebook%20Basics.ipynb)\n* [IPython - beyond plain python](../examples/IPython%20Kernel/Beyond%20Plain%20Python.ipynb)\n* [Markdown Cells](../examples/Notebook/Working%20With%20Markdown%20Cells.ipynb)\n* [Rich Display System](../examples/IPython%20Kernel/Rich%20Output.ipynb)\n* [Custom Display logic](../examples/IPython%20Kernel/Custom%20Display%20Logic.ipynb)\n* [Running a Secure Public Notebook Server](../examples/Notebook/Running%20the%20Notebook%20Server.ipynb#Securing-the-notebook-server)\n* [How Jupyter works](../examples/Notebook/Multiple%20Languages%2C%20Frontends.ipynb) to run code in different languages."},{"metadata":{},"cell_type":"markdown","source":"You can also get this tutorial and run it on your laptop:\n\n    git clone https://github.com/ipython/ipython-in-depth\n\nInstall IPython and Jupyter:\n\nwith [conda](https://www.anaconda.com/download):\n\n    conda install ipython jupyter\n\nwith pip:\n\n    # first, always upgrade pip!\n    pip install --upgrade pip\n    pip install --upgrade ipython jupyter\n\nStart the notebook in the tutorial directory:\n\n    cd ipython-in-depth\n    jupyter notebook"},{"metadata":{"trusted":true},"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n\n# Generating a synthetic dataset\nnp.random.seed(42)\n\n# Generate random data for square footage, bedrooms, and bathrooms\nsquare_feet = np.random.randint(1000, 4000, 100)  # Square footage between 1000 and 4000\nbedrooms = np.random.randint(1, 6, 100)  # Bedrooms between 1 and 5\nbathrooms = np.random.randint(1, 4, 100)  # Bathrooms between 1 and 3\n\n# Assume house prices depend on square footage, number of bedrooms, and bathrooms\nprice = square_feet * 150 + bedrooms * 10000 + bathrooms * 20000 + np.random.randint(10000, 50000, 100)\n\n# Creating a DataFrame\ndf = pd.DataFrame({\n    'Square_Feet': square_feet,\n    'Bedrooms': bedrooms,\n    'Bathrooms': bathrooms,\n    'Price': price\n})\n\n# Display the first few rows of the dataset\nprint(df.head())\n\n# Features and Target\nX = df[['Square_Feet', 'Bedrooms', 'Bathrooms']]  # Features\ny = df['Price']  # Target\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train the Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Print model performance\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"R-squared: {r2}\")\n\n# Visualize the predictions\nplt.scatter(y_test, y_pred)\nplt.xlabel(\"True Prices\")\nplt.ylabel(\"Predicted Prices\")\nplt.title(\"True vs Predicted House Prices\")\nplt.show()\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.15","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":2}